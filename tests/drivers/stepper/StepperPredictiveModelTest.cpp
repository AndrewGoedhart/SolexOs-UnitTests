#include <gtest/gtest.h>
#include <cmath>
#include <testFramework/UnitAssert.hpp>
#include <drivers/stepper/StepperPredictiveModel.hpp>
#include <iostream>
#include <testFramework/UnitAssert.hpp>

using FP = numeric::FixedPoint<16>;

TEST(StepperPredictiveModel, pwmTest){
  constexpr FP COIL_INDUCTANCE = FP(28.0);
  constexpr FP COIL_RESISTANCE = FP(17.2);
  constexpr FP BACK_EMF = FP(4.0);
  constexpr FP DECIMATION_INTERVAL = FP(0.016);
  constexpr FP VOLTS = FP(24.0);
  constexpr FP SPEED(0.0);
  constexpr FP target[] = {{0.481463},
                           {0.481675},
                           {0.481887},
                           {0.482099},
                           {0.482312},
                           {0.482524},
                           {0.482736},
                           {0.482948},
                           {0.483161},
                           {0.483373},
                           {0.483585},
                           {0.483798},
                           {0.484010},
                           {0.484223},
                           {0.484435},
                           {0.484647},
                           {0.484860},
                           {0.485072},
                           {0.485285},
                           {0.485497},
                           {0.485710},
                           {0.485922},
                           {0.486135},
                           {0.486347},
                           {0.486560},
                           {0.486773},
                           {0.486985},
                           {0.487198},
                           {0.487410},
                           {0.487623},
                           {0.487836},
                           {0.488048},
                           {0.488261},
                           {0.488474},
                           {0.488687},
                           {0.488899},
                           {0.489112},
                           {0.489325},
                           {0.489538},
                           {0.489750},
                           {0.489963},
                           {0.490176},
                           {0.490389},
                           {0.490602},
                           {0.490815},
                           {0.491028},
                           {0.491241},
                           {0.491454},
                           {0.491667},
                           {0.491880},
                           {0.492093},
                           {0.492306},
                           {0.492519},
                           {0.492732},
                           {0.492945},
                           {0.493158},
                           {0.493371},
                           {0.493584},
                           {0.493797},
                           {0.494010},
                           {0.494223},
                           {0.494437},
                           {0.494650},
                           {0.494863},
                           {0.495076},
                           {0.495289},
                           {0.495503},
                           {0.495716},
                           {0.495929},
                           {0.496143},
                           {0.496356},
                           {0.496569},
                           {0.496783},
                           {0.496996},
                           {0.497209},
                           {0.497423},
                           {0.497636},
                           {0.497850},
                           {0.498063},
                           {0.498277},
                           {0.498490},
                           {0.498704},
                           {0.498917},
                           {0.499131},
                           {0.499344},
                           {0.499558},
                           {0.499771},
                           {0.499985},
                           {0.500199},
                           {0.500412},
                           {0.500626},
                           {0.500840},
                           {0.501053},
                           {0.501267},
                           {0.501481},
                           {0.501694},
                           {0.501908},
                           {0.502122},
                           {0.502336},
                           {0.502550},
                           {0.502763},
                           {0.502977},
                           {0.503191},
                           {0.503405},
                           {0.503619},
                           {0.503833},
                           {0.504047},
                           {0.504261},
                           {0.504474},
                           {0.504688},
                           {0.504902},
                           {0.505116},
                           {0.505330},
                           {0.505544},
                           {0.505759},
                           {0.505973},
                           {0.506187},
                           {0.506401},
                           {0.506615},
                           {0.506829},
                           {0.507043},
                           {0.507257},
                           {0.507471},
                           {0.507686},
                           {0.507900},
                           {0.508114},
                           {0.508328},
                           {0.508543},
                           {0.508757}};

  Drivers::StepperPredictiveModel<FP> model(VOLTS, COIL_RESISTANCE, COIL_INDUCTANCE, BACK_EMF, DECIMATION_INTERVAL,
      Drivers::PWM_CHANNEL::CHANNEL1, Drivers::PWM_CHANNEL::CHANNEL2, 1024);

  for (int32_t i = 0; i < 128; i++) {
     auto computed = model.computeDutyCycle(SPEED, target[i], 0.5);
     EXPECT_LT(abs(computed.duty - i*8), 2);
     EXPECT_EQ(computed.channel, Drivers::PWM_CHANNEL::CHANNEL1);
   }


}


